buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${docker_compose_plugin_version}"
    }
}

plugins {
    id 'java-library'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id "com.gorylenko.gradle-git-properties"
    id "com.github.sherter.google-java-format"
    id "org.sonarqube" apply false
}

apply plugin: 'idea'
apply plugin: 'docker-compose'
apply from: 'gradle/static-checks.gradle'

group = 'com.sivalabs'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.webjars:bootstrap:${bootstrap_version}"
    implementation "org.webjars:font-awesome:${font_awesome_version}"
    implementation "org.webjars:vue:${vue_version}"
    implementation "io.springfox:springfox-boot-starter:${swagger_version}"

    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "commons-io:commons-io:${commons_io_version}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
    }
}

springBoot {
    buildInfo()
}

bootJar {
    //launchScript()
}

bootBuildImage {
    imageName = "sivaprasadreddy/spring-boot-todolist"
}

dockerCompose {
    useComposeFiles = ['docker/docker-compose.yml']
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

bootRun {
    args = ["--spring.profiles.active=local"]
}
bootRun.dependsOn composeUp

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

googleJavaFormat {
    options style: 'AOSP'
}

check.dependsOn verifyGoogleJavaFormat

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        //showStandardStreams = true
        exceptionFormat = "full"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    include "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
    shouldRunAfter test

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        //showStandardStreams = true
        exceptionFormat = "full"
    }
}

check.dependsOn integrationTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

wrapper {
    gradleVersion = "6.7.1"
}
